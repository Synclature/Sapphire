import React, { useState, useEffect } from 'react';
import {
    Container,
    Row,
    Col,
    Input,
    Label,
    Button,
    Form,
    FormFeedback,
    Card,
    CardBody,
    CardHeader,
} from 'reactstrap';
import BreadCrumb from '../../Components/Common/BreadCrumb';
import { Grid, _ } from 'gridjs-react';

//Import Flatepicker
import Flatpickr from 'react-flatpickr';

import Select from 'react-select';

// Formik validation
import * as Yup from 'yup';
import { useFormik } from 'formik';
import { Link } from 'react-router-dom';

const CreateVulnerabilityManagement = () => {
    const [ciaImpactSelect, setCiaImpactSelect] = useState(null);
    const [riskScore, setRiskScore] = useState(1);
    const [impactContextSelect, setImpactContextSelect] = useState(1);
    const [likelihoodSelect, setLikelihoodSelect] = useState(1);
    const [expectedLikelihoodSelect, setexpectedLikelihoodSelect] = useState(1);
    const [expectedImpactSelect, setexpectedImpactSelect] = useState(1);
    const [residualRisk, setResidualRisk] = useState(1);

    function handleciaImpactSelect(ciaImpactSelect) {
        setCiaImpactSelect(ciaImpactSelect);
    }

    const handleimpactContextSelect = e => {
        setImpactContextSelect(e.value);
    };

    const handlelikelihoodSelect = e => {
        setLikelihoodSelect(e.value);
    };

    useEffect(() => {
        setRiskScore(impactContextSelect * likelihoodSelect);
    }, [impactContextSelect, likelihoodSelect]);

    const handleExpectedLikelihoodSelect = e => {
        setexpectedLikelihoodSelect(e.value);
    };

    const handleexpectedImpactSelect = e => {
        setexpectedImpactSelect(e.value);
    };

    useEffect(() => {
        setResidualRisk(expectedLikelihoodSelect * expectedImpactSelect);
    }, [expectedLikelihoodSelect, expectedImpactSelect]);

    const validation = useFormik({
        // enableReinitialize : use this flag when initial values needs to be changed
        enableReinitialize: true,

        initialValues: {
            vaptCycleName: '',
            startDate: '',
            endDate: '',
            standard: '',
            controls: '',
            owner: '',
        },
        validationSchema: Yup.object({}),
    });

    const standard = [];

    const controls = [];

    const owner = [{ value: 'Abhishek', label: 'Abhishek' }];

    document.title = 'VAPT Cycle';
    return (
        <React.Fragment>
            <div className="page-content">
                <Container fluid>
                    <BreadCrumb title="VAPT Cycle" pageTitle="VAPT Cycle" />
                    <Row>
                        <Col>
                            <Card>
                                <CardHeader className="d-flex align-items-center justify-content-end">
                                    <Link to="/vulnerability-management">
                                        <i className="las la-arrow-left mr-sm-2"></i>Go Back
                                    </Link>
                                </CardHeader>
                                <CardBody>
                                    <Form
                                        onSubmit={e => {
                                            e.preventDefault();
                                            validation.handleSubmit();
                                            return false;
                                        }}
                                        action="#">
                                        <Row className="mb-4">
                                            <Col sm="12" md="6" xl="4" className="mb-3">
                                                <Label
                                                    htmlFor="vaptCycleName"
                                                    className="form-label">
                                                    VAPT Cycle Name
                                                </Label>
                                                <Input
                                                    name="vaptCycleName"
                                                    className="form-control"
                                                    placeholder="Enter VAPT Cycle Name"
                                                    type="text"
                                                    onChange={validation.handleChange}
                                                    onBlur={validation.handleBlur}
                                                    value={validation.values.vaptCycleName || ''}
                                                    invalid={
                                                        validation.touched.vaptCycleName &&
                                                        validation.errors.vaptCycleName
                                                            ? true
                                                            : false
                                                    }
                                                />
                                                {validation.touched.vaptCycleName &&
                                                validation.errors.vaptCycleName ? (
                                                    <FormFeedback type="invalid">
                                                        {validation.errors.vaptCycleName}
                                                    </FormFeedback>
                                                ) : null}
                                            </Col>

                                            <Col sm="12" md="6" xl="4">
                                                <Label htmlFor="startDate" className="form-label">
                                                    Start Date
                                                </Label>
                                                <Flatpickr
                                                    className="form-control"
                                                    options={{
                                                        dateFormat: 'd-m-Y',
                                                    }}
                                                    onChange={validation.handleChange}
                                                    value={validation.values.startDate || ''}
                                                    invalid={
                                                        validation.touched.startDate &&
                                                        validation.errors.startDate
                                                            ? true
                                                            : false
                                                    }
                                                    placeholder="Select Risk Identification Date"
                                                />
                                                {validation.touched.startDate &&
                                                validation.errors.startDate ? (
                                                    <FormFeedback type="invalid">
                                                        {validation.errors.startDate}
                                                    </FormFeedback>
                                                ) : null}
                                            </Col>

                                            <Col sm="12" md="6" xl="4">
                                                <Label htmlFor="endDate" className="form-label">
                                                    End Date
                                                </Label>
                                                <Flatpickr
                                                    className="form-control"
                                                    options={{
                                                        dateFormat: 'd-m-Y',
                                                    }}
                                                    onChange={validation.handleChange}
                                                    value={validation.values.endDate || ''}
                                                    invalid={
                                                        validation.touched.endDate &&
                                                        validation.errors.endDate
                                                            ? true
                                                            : false
                                                    }
                                                    placeholder="Select Risk Identification Date"
                                                />
                                                {validation.touched.endDate &&
                                                validation.errors.endDate ? (
                                                    <FormFeedback type="invalid">
                                                        {validation.errors.endDate}
                                                    </FormFeedback>
                                                ) : null}
                                            </Col>

                                            <Col sm="12" md="6" xl="4" className="mb-3">
                                                <Label htmlFor="standard" className="form-label">
                                                    Standard
                                                </Label>
                                                <Select name="standard" options={standard}></Select>
                                            </Col>

                                            <Col sm="12" md="6" xl="4" className="mb-3">
                                                <Label htmlFor="controls" className="form-label">
                                                    Controls
                                                </Label>
                                                <Select name="controls" options={controls}></Select>
                                            </Col>

                                            <Col sm="12" md="6" xl="4" className="mb-3">
                                                <Label htmlFor="owner" className="form-label">
                                                    Owner
                                                </Label>
                                                <Select name="owner" options={owner}></Select>
                                            </Col>
                                        </Row>

                                        <div className="mt-4 text-end">
                                            <Button
                                                color="success"
                                                className="btn btn-success"
                                                type="submit">
                                                Create
                                            </Button>
                                        </div>
                                    </Form>
                                </CardBody>
                            </Card>
                        </Col>
                    </Row>
                </Container>
            </div>
        </React.Fragment>
    );
};

export default CreateVulnerabilityManagement;
